{
	"React Component": {
		"prefix": "tsrcc",
		"body": [
			"import * as React from 'react'",
			"import injectSheet from 'react-jss'",
			"import classes from './index.jss'",
			"",
			"export interface ${1:App}Classes<T> {",
			"    component: T,",
			"}",
			"",
			"export interface ${1:App}Props {",
			"    classes?: ${1:App}Classes<string>,",
			"    className?: string",
			"}",
			"",
			"class ${1:} extends React.Component<${1:}Props> {",
			"    render() {",
			"        const { classes, className } = this.props",
			"        const componentClass = classes.component + (className ? ` \\${className}` : '')",
			"        return (",
			"            <div className={componentClass}>",
			"                ${2:}",
			"            </div>",
			"        )",
			"    }",
			"}",
			"",
			"export default injectSheet<${1:App}Props>(classes)(${1:})",
			""
		],
		"description": "Create a React component with JSS for styling"
	},
	"JSS Component Sytle": {
		"prefix": "tsjss",
		"body": [
			"import { Style } from 'jss/css'",
			"import { ${1:App}Classes } from './index'",
			"import { JssTheme } from '../${2:}theme'",
			"",
			"const classes = (theme: JssTheme): ${1:App}Classes<Style> => ({",
			"   component: {",
			"       yourJssStyleGoesHere: ''",
			"   },",
			"})",
			"",
			"export default classes",
			""
		],
		"description": "Create JSS classes for a component"
	},
	"React Component with State": {
		"prefix": "tsrcsc",
		"body": [
			"import * as React from 'react'",
			"import injectSheet from 'react-jss'",
			"import classes from './index.jss'",
			"",
			"export interface ${1:App}Classes<T> {",
			"    component: T,",
			"}",
			"",
			"export interface ${1:App}Props {",
			"    classes?: ${1:App}Classes<string>,",
			"}",
			"",
			"export interface ${1:App}State {",
			"}",
			"",
			"class ${1:} extends React.Component<${1:}Props, ${1:}State> {",
			"    constructor(props: ${1:}Props) {",
			"        super(props)",
			"",
			"        this.state = {",
			"        }",
			"  }",
			"",
			"    render() {",
			"        const { classes } = this.props",
			"        return (",
			"            <div className={classes.component}>",
			"                ${2:}",
			"            </div>",
			"        )",
			"    }",
			"}",
			"",
			"export default injectSheet<${1:App}Props>(classes)(${1:})",
			""
		],
		"description": "Create a stateful React component"
	},
	"React Pure Function Component": {
		"prefix": "tsrfc",
		"body": [
			"import * as React from 'react'",
			"import injectSheet from 'react-jss'",
			"import classes from './index.jss'",
			"",
			"export interface ${1:App}Classes<T> {",
			"    component: T,",
			"}",
			"",
			"export interface ${1:App}Props {",
			"    classes?: ${1:App}Classes<string>,",
			"    className?: string",
			"}",
			"",
			"export function ${1:} (props: ${1:}Props) {",
			"        const { classes, className } = props",
			"        const componentClass = classes.component + (className ? ` \\${className}` : '')",
			"        return (",
			"            <div className={componentClass}>",
			"                ${2:}",
			"            </div>",
			"        )",
			"}",
			"",
			"export default injectSheet<${1:App}Props>(classes)(${1:})",
			""
		],
		"description": "Create a react function component"
	},
	"React redux container": {
		"prefix": "tsrcrdx",
		"body": [
			"import * as React from 'react'",
			"import injectSheet from 'react-jss'",
			"import { connect } from 'react-redux'",
			"import classes from './index.jss'",
			"",
			"export interface ${1:App}Classes<T> {",
			"    component: T,",
			"}",
			"",
			"export interface ${1:App}Props {",
			"    classes?: ${1:App}Classes<string>,",
			"    className?: string",
			"}",
			"",
			"class ${1:} extends React.Component<${1:}Props> {",
			"    render() {",
			"        const { classes, className } = this.props",
			"        const componentClass = classes.component + (className ? ` \\${className}` : '')",
			"        return (",
			"            <div className={componentClass}>",
			"                ${2:}",
			"            </div>",
			"        )",
			"    }",
			"}",
			"",
			"const mapStateToProps = (state, ownProps:${1:App}Props) => ({",
			"})",
			"",
			"const mapDispatchToProps = (dispatch) => ({",
			"})",
			"",
			"export default injectSheet<${1:App}Props>(classes)(connect(mapStateToProps, mapDispatchToProps)(${1:}))",
			""
		],
		"description": "React component with redux boilerplate"
	},
	"constructor": {
		"prefix": "conc",
		"body": [
			"constructor(props) {",
			"    super(props)",
			"    ${1:}",
			"}"
		],
		"description": "Add a constructor for a React component"
	},
	"componentWillMount": {
		"prefix": "cwm",
		"body": [
			"componentWillMount() {",
			"    ${1:}",
			"}"
		],
		"description": "Invoked immediately before mounting occurs (called before render)"
	},
	"render": {
		"prefix": "ren",
		"body": [
			"render() {",
			"    return (",
			"      ${1:}",
			"    )",
			"}"
		],
		"description": "Render function of a React component"
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": [
			"componentDidMount() {",
			"    ${1:}",
			"}"
		],
		"description": "Invoked immediately after a component is mounted"
	},
	"componentWillReceiveProps": {
		"prefix": "cwrp",
		"body": [
			"componentWillReceiveProps(nextProps: ${1:}) {",
			"    ${2:}",
			"}"
		],
		"description": "Invoked before a mounted component receives new props"
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": [
			"shouldComponentUpdate(nextProps: ${1:}, nextState) {",
			"    ${2:}",
			"}"
		],
		"description": "Invoked before rendering when new props or state are being received"
	},
	"componentWillUpdate": {
		"prefix": "cwu",
		"body": [
			"componentWillUpdate(nextProps: ${1:}, nextState) {",
			"    ${2:}",
			"}"
		],
		"description": "Invoked immediately before rendering when new props or state are being received"
	},
	"componentDidUpdate": {
		"prefix": "cdu",
		"body": [
			"componentDidUpdate(prevProps: ${1:}, prevState) {",
			"    ${2:}",
			"}"
		],
		"description": "Invoked immediately after updating occurs. This method is not called for the initial render"
	},
	"componentWillUnmount": {
		"prefix": "cwum",
		"body": [
			"componentWillUnmount() {",
			"    ${1:}",
			"}"
		],
		"description": "Invoked immediately before a component is unmounted and destroyed"
	},
	"componentSetState": {
		"prefix": "sst",
		"body": [
			"this.setState({",
			"    ${1:}",
			"})"
		],
		"description": "Performs a shallow merge of nextState into current state"
	},
	"bind method": {
		"prefix": "bnd",
		"body": [
			"this.${1:} = this.${1:}.bind(this)"
		],
		"description": "Bind this in method"
	},
	"method": {
		"prefix": "met",
		"body": [
			"${1:methodName} = (${2:e}) => {",
			"    ${3:}",
			"}"
		],
		"description": "Create a method"
	},
	"import": {
		"prefix": "imt",
		"body": [
			"import { $2 } from '$1'"
		],
		"description": "Create a import"
	}
}